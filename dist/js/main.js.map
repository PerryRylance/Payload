{"version":3,"sources":["core.js","game.js","interaction.js","units.js","events/event-dispatcher.js","world.js","entities/entity.js","entities/planet.js","entities/ship.js","assets/assets.js","assets/asset.js","assets/collection.js","events/event.js"],"names":["window","Payload","stats","Stats","showPanel","domElement","style","zIndex","position","document","body","appendChild","Box2D","TOTAL_MEMORY","BOX2D_MEMORY_MB","extend","child","parent","prototype","Object","create","constructor","assert","condition","failure","Error","init","self","this","assets","Assets","on","event","game","Game","load","world","World","Interaction","camera","element","isDragging","addEventListener","onMouseDown","onMouseUp","onMouseMove","onMouseWheel","x","movementX","zoom","y","movementY","amount","deltaY","factor","updateProjectionMatrix","payload","Units","RATIO","physicsToGraphics","GRAPHICS_TO_PHYSICS","graphicsToPhysics","PHYSICS_TO_GRAPHICS","p2g","g2p","EventDispatcher","_listenersByType","type","listener","thisObject","useCapture","types","split","length","i","Function","target","hasOwnProperty","obj","push","removeEventListener","arr","arguments","splice","off","hasEventListener","dispatchEvent","Event","src","name","path","unshift","phase","CAPTURING_PHASE","_cancelled","_triggerListeners","AT_TARGET","BUBBLING_PHASE","topMostElement","customEvent","key","value","$","trigger","call","options","apply","defaults","entities","planets","ships","initPhysics","initGraphics","initPlanets","initShips","step","planet","count","minimum","maximum","radius","friction","restitution","b2World","b2Vec2","JSContactListener","BeginContact","contactPtr","contact","wrapPointer","b2Contact","fixtureA","GetFixtureA","fixtureB","GetFixtureB","bodyA","GetBody","bodyB","entityA","entity","entityB","onCollision","EndContact","PreSolve","PostSolve","SetContinuousPhysics","SetContactListener","width","innerWidth","height","innerHeight","scene","THREE","Scene","OrthographicCamera","z","rotation","set","Math","PI","add","renderer","WebGLRenderer","antialias","setSize","querySelector","interaction","numPlanets","round","random","Planet","Entity","object3d","remove","index","indexOf","begin","Step","update","render","debugDrawEnabled","context","resetTransform","clearRect","canvas","translate","scale","DrawDebugData","requestAnimationFrame","end","enableDebugDraw","debugDraw","_debugDraw","getCanvasDebugDraw","createElement","id","getContext","SetDebugDraw","SetFlags","e_pairBit","initAudio","setOptions","defineProperty","get","b2Body","vec","GetWorldCenter","get_x","get_y","isNumeric","SetTransform","angle","GetAngle","localFixture","otherFixture","DestroyBody","fixtureDestructionQueue","fixturesByFaceIndex","initMesh","spherize","img","size","srcctx","drawImage","dst","dstctx","fillStyle","fillRect","srcpixels","getImageData","data","dstpixels","slice","fill","srcpos","dstpos","ny","ny2","theta","nxn","nyn","x2","y2","nr","nx","nx2","r","sqrt","atan2","cos","sin","parseInt","temp","ImageData","putImageData","minRadius","maxRadius","_radius","density","_density","area","_area","pow","sides","_sides","sites","inner","a","delaunator","Delaunator","from","_vertices","_indices","triangles","convertPoint","point","_destructionGravityMultiplier","b2CenterOfGravity","b2BodyDef","CreateBody","vertices","shape","b2PolygonShape","buffer","_malloc","offset","HEAPF32","ptr_wrapped","Set","createPolygonShape","fixtureDef","b2FixtureDef","set_density","set_friction","set_restitution","set_shape","fixture","CreateFixture","v","materials","damage","surface","asset","textures","resource","image","MeshBasicMaterial","map","CanvasTexture","Object3D","Mesh","CircleGeometry","geometry","Geometry","Vector3","faceIndex","face","Face3","faces","faceUVs","radius2","j","vertex","vector","Vector2","faceVertexUvs","Ship","collections","manager","LoadingManager","onStart","url","loaded","total","onProgress","onLoad","onError","ajax","success","response","status","xhr","loadFromJSON","error","json","Collection","percent","Asset","getLoaderFromFilename","loader","filename","m","exec","toLowerCase","TextureLoader","isAssetDefinition","values","floor","bubbles","cancelable","PHASE_CAPTURE","stopPropagation"],"mappings":"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","file":"main.js","sourcesContent":["window.Payload = function()\r\n{\r\n\twindow.stats = new Stats();\r\n\tstats.showPanel(0);\r\n\tstats.domElement.style.zIndex = 999;\r\n\tstats.domElement.style.position = \"fixed\";\r\n\tdocument.body.appendChild(stats.domElement);\r\n\t\r\n\twindow.Box2D = Box2D({\r\n\t\tTOTAL_MEMORY: Payload.BOX2D_MEMORY_MB * 1048576\r\n\t});\r\n}\r\n\r\nPayload.BOX2D_MEMORY_MB\t\t= 256;\r\n\r\nPayload.extend = function(child, parent)\r\n{\r\n\tchild.prototype = Object.create(parent.prototype);\r\n\tchild.prototype.constructor = child;\r\n}\r\n\r\nPayload.assert = function(condition, failure)\r\n{\r\n\tif(condition === true)\r\n\t\treturn;\r\n\t\r\n\tif(condition === false)\r\n\t{\r\n\t\tif(!failure)\r\n\t\t\tthrow new Error(\"Assertion failed\");\r\n\t\t\r\n\t\tthrow new Error(failure);\r\n\t}\r\n\t\r\n\tthrow new Error(\"Invalid assertion\");\r\n}\r\n\r\nPayload.prototype.init = function()\r\n{\r\n\tvar self = this;\r\n\t\r\n\tthis.assets = new Payload.Assets();\r\n\tthis.assets.on(\"load\", function(event) {\r\n\t\t\r\n\t\t// Temp code, just start up a game here\r\n\t\tself.game = new Payload.Game();\r\n\t\t\r\n\t});\r\n\tthis.assets.load();\r\n}\r\n","// requires: core.js\r\n\r\n/**\r\n * @module Payload.Game\r\n * Handles rules, turns, etc.\r\n */\r\n\r\nPayload.Game = function()\r\n{\r\n\tthis.world = new Payload.World();\r\n}\r\n","// requires: core.js\r\n\r\nPayload.Interaction = function(camera, element)\r\n{\r\n\tvar self = this;\r\n\t\r\n\tthis.camera\t\t= camera;\r\n\tthis.element\t= element;\r\n\t\r\n\tthis.isDragging = false;\r\n\t\r\n\telement.addEventListener(\"mousedown\", function(event) {\r\n\t\tself.onMouseDown(event);\r\n\t});\r\n\t\r\n\telement.addEventListener(\"mouseup\", function(event) {\r\n\t\tself.onMouseUp(event);\r\n\t});\r\n\t\r\n\telement.addEventListener(\"mousemove\", function(event) {\r\n\t\tself.onMouseMove(event);\r\n\t});\r\n\t\r\n\telement.addEventListener(\"mousewheel\", function(event) {\r\n\t\tself.onMouseWheel(event);\r\n\t});\r\n}\r\n\r\nPayload.Interaction.prototype.onMouseDown = function(event)\r\n{\r\n\tthis.isDragging = true;\r\n}\r\n\r\nPayload.Interaction.prototype.onMouseUp = function(event)\r\n{\r\n\tthis.isDragging = false;\r\n}\r\n\r\nPayload.Interaction.prototype.onMouseMove = function(event)\r\n{\r\n\tif(!this.isDragging)\r\n\t\treturn;\r\n\t\r\n\tthis.camera.position.x -= event.movementX / this.camera.zoom;\r\n\tthis.camera.position.y -= event.movementY / this.camera.zoom;\r\n}\r\n\r\nPayload.Interaction.prototype.onMouseWheel = function(event)\r\n{\t\r\n\tvar amount\t\t= event.deltaY < 0 ? 1 : -1;\r\n\tvar factor\t\t= this.camera.zoom * 0.1;\r\n\t\r\n\t// TODO: Center on mouse point, apply zoom, recenter on old camera center\r\n\t\r\n\tthis.camera.zoom += amount * factor;\r\n\tthis.camera.updateProjectionMatrix();\r\n}","// require: core.js\r\n\r\nPayload.Units = {\r\n\t\r\n\tRATIO: 20,\r\n\t\r\n\tphysicsToGraphics: function(x) {\r\n\t\treturn x * Payload.Units.GRAPHICS_TO_PHYSICS;\r\n\t},\r\n\t\r\n\tgraphicsToPhysics: function(x) {\r\n\t\treturn x * Payload.Units.PHYSICS_TO_GRAPHICS;\r\n\t}\r\n\t\r\n};\r\n\r\nPayload.Units.GRAPHICS_TO_PHYSICS\t\t= 1 / Payload.Units.RATIO;\r\nPayload.Units.PHYSICS_TO_GRAPHICS\t\t= Payload.Units.RATIO;\r\n\r\nPayload.Units.p2g = Payload.Units.physicsToGraphics;\r\nPayload.Units.g2p = Payload.Units.graphicsToPhysics;\r\n","// requires: core.js\r\n\r\n/**\r\n * Base class for any (non HTMLElement) object which dispatches or listens for events\r\n * @module Payload.EventDispatcher\r\n * @memberof Payload\r\n */\r\nPayload.EventDispatcher = function()\r\n{\r\n\tPayload.assert(this instanceof Payload.EventDispatcher, \"Inheritence assertion failed, did you forget to call extend?\");\r\n\t\r\n\tthis._listenersByType = {};\r\n}\r\n\r\n/**\r\n * Adds an event listener on this object\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @param {string} type The event type, or multiple types separated by spaces\r\n * @param {function} callback The callback to call when the event fires\r\n * @param {object} [thisObject] The object to use as \"this\" when firing the callback\r\n * @param {bool} [useCapture] If true, fires the callback on the capture phase, as opposed to bubble phase\r\n */\r\nPayload.EventDispatcher.prototype.addEventListener = function(type, listener, thisObject, useCapture)\r\n{\r\n\tvar types = type.split(/\\s+/);\r\n\tif(types.length > 1)\r\n\t{\r\n\t\tfor(var i = 0; i < types.length; i++)\r\n\t\t\tthis.addEventListener(types[i], listener, thisObject, useCapture);\r\n\t\t\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif(!(listener instanceof Function))\r\n\t\tthrow new Error(\"Listener must be a function\");\r\n\r\n\tvar target;\r\n\tif(!this._listenersByType.hasOwnProperty(type))\r\n\t\ttarget = this._listenersByType[type] = [];\r\n\telse\r\n\t\ttarget = this._listenersByType[type];\r\n\t\r\n\tvar obj = {\r\n\t\tlistener: listener,\r\n\t\tthisObject: (thisObject ? thisObject : this),\r\n\t\tuseCapture: (useCapture ? true : false)\r\n\t\t};\r\n\t\t\r\n\ttarget.push(obj);\r\n}\r\n\r\n/**\r\n * Alias for addEventListener\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @see Payload.EventDispatcher#addEventListener\r\n */\r\nPayload.EventDispatcher.prototype.on = Payload.EventDispatcher.prototype.addEventListener;\r\n\r\n/**\r\n * Removes event listeners from this object\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @param {string} type The event type to remove listeners from\r\n * @param {function} [listener] The function to remove. If omitted, all listeners will be removed\r\n * @param {object} [thisObject] Use the parameter to remove listeners bound with the same thisObject\r\n * @param {bool} [useCapture] Remove the capture phase event listener. Otherwise, the bubble phase event listener will be removed.\r\n */\r\nPayload.EventDispatcher.prototype.removeEventListener = function(type, listener, thisObject, useCapture)\r\n{\r\n\tvar arr, index, obj;\r\n\r\n\tif(!(arr = this._listenersByType[type]))\r\n\t\treturn;\r\n\t\t\r\n\tif(!thisObject)\r\n\t\tthisObject = this;\r\n\t\t\r\n\tuseCapture = (useCapture ? true : false);\r\n\t\r\n\tfor(var i = 0; i < arr.length; i++)\r\n\t{\r\n\t\tobj = arr[i];\r\n\t\r\n\t\tif((arguments.length == 1 || obj.listener == listener) && obj.thisObject == thisObject && obj.useCapture == useCapture)\r\n\t\t{\r\n\t\t\tarr.splice(i, 1);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Alias for removeEventListener\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @see Payload.EventDispatcher#removeEventListener\r\n */\r\nPayload.EventDispatcher.prototype.off = Payload.EventDispatcher.prototype.removeEventListener;\r\n\r\n/**\r\n * Test for listeners of type on this object\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @param {string} type The event type to test for\r\n * @return {bool} True if this object has listeners bound for the specified type\r\n */\r\nPayload.EventDispatcher.prototype.hasEventListener = function(type)\r\n{\r\n\treturn (_listenersByType[type] ? true : false);\r\n}\r\n\r\n/**\r\n * Fires an event on this object\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @param {string|Payload.Event} event Either the event type as a string, or an instance of Payload.Event\r\n */\r\nPayload.EventDispatcher.prototype.dispatchEvent = function(event)\r\n{\r\n\tif(!(event instanceof Payload.Event))\r\n\t{\r\n\t\tif(typeof event == \"string\")\r\n\t\t\tevent = new Payload.Event(event);\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar src = event;\r\n\t\t\tevent = new Payload.Event();\r\n\t\t\tfor(var name in src)\r\n\t\t\t\tevent[name] = src[name];\r\n\t\t}\r\n\t}\r\n\r\n\tevent.target = this;\r\n\t\t\r\n\tvar path = [];\r\n\tfor(var obj = this.parent; obj != null; obj = obj.parent)\r\n\t\tpath.unshift(obj);\r\n\t\r\n\tevent.phase = Payload.Event.CAPTURING_PHASE;\r\n\tfor(var i = 0; i < path.length && !event._cancelled; i++)\r\n\t\tpath[i]._triggerListeners(event);\r\n\t\t\r\n\tif(event._cancelled)\r\n\t\treturn;\r\n\t\t\r\n\tevent.phase = Payload.Event.AT_TARGET;\r\n\tthis._triggerListeners(event);\r\n\t\t\r\n\tevent.phase = Payload.Event.BUBBLING_PHASE;\r\n\tfor(i = path.length - 1; i >= 0 && !event._cancelled; i--)\r\n\t\tpath[i]._triggerListeners(event);\r\n\t\r\n\t// Native DOM event\r\n\tvar topMostElement = this.element;\r\n\tfor(var obj = this.parent; obj != null; obj = obj.parent)\r\n\t{\r\n\t\tif(obj.element)\r\n\t\t\ttopMostElement = obj.element;\r\n\t}\r\n\t\r\n\tif(topMostElement)\r\n\t{\r\n\t\tvar customEvent = {};\r\n\t\t\r\n\t\tfor(var key in event)\r\n\t\t{\r\n\t\t\tvar value = event[key];\r\n\t\t\t\r\n\t\t\tif(key == \"type\")\r\n\t\t\t\tvalue += \".Payload\";\r\n\t\t\t\r\n\t\t\tcustomEvent[key] = value;\r\n\t\t}\r\n\t\t\r\n\t\t$(topMostElement).trigger(customEvent);\r\n\t}\r\n}\r\n\r\n/**\r\n * Alias for removeEventListener\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @see Payload.EventDispatcher#removeEventListener\r\n */\r\nPayload.EventDispatcher.prototype.trigger = Payload.EventDispatcher.prototype.dispatchEvent;\r\n\r\n/**\r\n * Handles the logic of triggering listeners\r\n * @method\r\n * @memberof Payload.EventDispatcher\r\n * @inner\r\n */\r\nPayload.EventDispatcher.prototype._triggerListeners = function(event)\r\n{\r\n\tvar arr, obj;\r\n\t\r\n\tif(!(arr = this._listenersByType[event.type]))\r\n\t\treturn;\r\n\t\t\r\n\tfor(var i = 0; i < arr.length; i++)\r\n\t{\r\n\t\tobj = arr[i];\r\n\t\t\r\n\t\tif(event.phase == Payload.Event.CAPTURING_PHASE && !obj.useCapture)\r\n\t\t\tcontinue;\r\n\t\t\t\r\n\t\tobj.listener.call(arr[i].thisObject, event);\r\n\t}\r\n}\r\n","/* requires: \r\ncore.js\r\nevents/event-dispatcher.js\r\n*/\r\n\r\n/**\r\n * @module Payload.World\r\n * Handles physics, graphics, entities, updates etc.\r\n */\r\n\r\nPayload.World = function(options)\r\n{\r\n\tPayload.EventDispatcher.apply(this, arguments);\r\n\t\r\n\tif(!options)\r\n\t\toptions = {};\r\n\t\r\n\tthis.options = options = $.extend(true, {}, Payload.World.defaults, options);\r\n\t\r\n\tthis.entities\t= [];\r\n\tthis.planets\t= [];\r\n\tthis.ships\t\t= [];\r\n\t\r\n\tthis.initPhysics();\r\n\tthis.initGraphics();\r\n\t\r\n\tthis.initPlanets(options);\r\n\tthis.initShips(options);\r\n\t\r\n\t// this.enableDebugDraw();\r\n\t\r\n\tthis.step();\r\n}\r\n\r\nPayload.extend(Payload.World, Payload.EventDispatcher);\r\n\r\nPayload.World.defaults = {\r\n\tplanet: {\r\n\t\tcount: {\r\n\t\t\tminimum:\t3,\r\n\t\t\tmaximum:\t9\r\n\t\t},\r\n\t\tradius: {\r\n\t\t\tminimum:\t50,\r\n\t\t\tmaximum:\t1024\r\n\t\t},\r\n\t\tfriction:\t\t0.9,\r\n\t\trestitution:\t0.0\r\n\t}\r\n};\r\n\r\nPayload.World.prototype.initPhysics = function()\r\n{\r\n\tvar self = this;\r\n\t\t\r\n\tthis.b2World\t= new Box2D.b2World(new Box2D.b2Vec2(0.0, 0.0));\r\n\t\r\n\tthis.listener = new Box2D.JSContactListener();\r\n\tthis.listener.BeginContact = function(contactPtr) {\r\n\t\t\r\n\t\tvar contact = Box2D.wrapPointer(contactPtr, Box2D.b2Contact)\r\n\t\t\r\n\t\tvar fixtureA = contact.GetFixtureA();\r\n\t\tvar fixtureB = contact.GetFixtureB();\r\n\t\t\r\n\t\tvar bodyA = fixtureA.GetBody();\r\n\t\tvar bodyB = fixtureB.GetBody();\r\n\t\t\r\n\t\tvar entityA = bodyA.entity;\r\n\t\tvar entityB = bodyB.entity;\r\n\t\t\r\n\t\tif(entityA && entityB)\r\n\t\t{\r\n\t\t\tentityA.onCollision(entityB, fixtureA, fixtureB);\r\n\t\t\tentityB.onCollision(entityA, fixtureB, fixtureA);\r\n\t\t}\r\n\t\t\r\n\t};\r\n\t\r\n\t// Empty implementations for unused methods.\r\n\tthis.listener.EndContact = function() {};\r\n\tthis.listener.PreSolve = function() {};\r\n\tthis.listener.PostSolve = function() {};\r\n\t\r\n\tthis.b2World.SetContinuousPhysics(1);\r\n\tthis.b2World.SetContactListener(this.listener);\r\n}\r\n\r\nPayload.World.prototype.initGraphics = function()\r\n{\r\n\tvar width\t\t\t= window.innerWidth;\r\n\tvar height\t\t\t= window.innerHeight;\r\n\t\r\n\t// Actual graphics\r\n\tthis.scene\t\t\t= new THREE.Scene();\r\n\t\r\n\tthis.camera\t\t\t= new THREE.OrthographicCamera(\r\n\t\twidth / -2,\r\n\t\twidth / 2,\r\n\t\theight / 2,\r\n\t\theight / -2,\r\n\t\t1,\r\n\t\t1000\r\n\t);\r\n\t\r\n\tthis.camera.position.z = -500;\r\n\tthis.camera.rotation.set(-Math.PI, 0, 0);\r\n\t\r\n\tthis.scene.add(this.camera);\r\n\t\r\n\tthis.renderer\t\t= new THREE.WebGLRenderer({\r\n\t\tantialias: true\r\n\t});\r\n\tthis.renderer.setSize(width, height);\r\n\t\r\n\t// Add renderer DOM element\r\n\tdocument.querySelector(\"#scene\").appendChild(this.renderer.domElement);\r\n\t\r\n\t// And mouse interaction\r\n\tthis.interaction = new Payload.Interaction(this.camera, this.renderer.domElement);\r\n}\r\n\r\nPayload.World.prototype.initPlanets = function(options)\r\n{\r\n\tvar numPlanets = options.planet.count.minimum + Math.round(Math.random() * (options.planet.count.maximum - options.planet.count.minimum));\r\n\t\r\n\tfor(var i = 0; i < numPlanets; i++)\r\n\t{\r\n\t\tvar planet = new Payload.Planet(this, {\r\n\t\t\tposition: {\r\n\t\t\t\tx: (-0.5 + Math.random()) * options.planet.radius.maximum * 12,\r\n\t\t\t\ty: (-0.5 + Math.random()) * options.planet.radius.maximum * 12\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tthis.add(planet);\r\n\t}\r\n}\r\n\r\nPayload.World.prototype.initShips = function(options)\r\n{\r\n\t// A single debug ship\r\n\t// var ship = new Payload.Ship();\r\n\t// this.add(ship);\r\n}\r\n\r\nPayload.World.prototype.add = function(entity)\r\n{\r\n\tPayload.assert(entity instanceof Payload.Entity, \"Not an Entity\");\r\n\t\r\n\tthis.entities.push(entity);\r\n\tentity.parent = this;\r\n\t\r\n\tif(entity.object3d)\r\n\t\tthis.scene.add(entity.object3d);\r\n\t\r\n\tentity.trigger(\"added\");\r\n}\r\n\r\nPayload.World.prototype.remove = function(entity)\r\n{\r\n\tPayload.assert(entity instanceof Payload.Entity, \"Not an Entity\");\r\n\t\r\n\tvar index = this.entities.indexOf(entity);\r\n\t\r\n\tPayload.assert(index != -1, \"Not in entity list\");\r\n\t\r\n\tthis.entities.splice(index, 1);\r\n\tthis.entity.parent = null;\r\n\t\r\n\tthis.entity.trigger(\"removed\");\r\n}\r\n\r\nPayload.World.prototype.step = function()\r\n{\r\n\tvar self = this;\r\n\t\r\n\tif(window.stats)\r\n\t\twindow.stats.begin();\r\n\t\r\n\tthis.b2World.Step(1 / 30, 10, 10);\r\n\t\r\n\t// Entities\r\n\tfor(var i = 0; i < this.entities.length; i++)\r\n\t\tthis.entities[i].update();\r\n\t\r\n\t// Rendering\r\n\tthis.renderer.render(this.scene, this.camera);\r\n\t\r\n\tif(this.debugDrawEnabled)\r\n\t{\r\n\t\tthis.context.resetTransform();\r\n\t\tthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\t\t\r\n\t\tthis.context.translate(this.canvas.width / 2, this.canvas.height / 2);\r\n\t\t\r\n\t\tthis.context.scale(this.camera.zoom, this.camera.zoom);\r\n\t\tthis.context.translate(-this.camera.position.x, -this.camera.position.y);\r\n\t\t\r\n\t\tthis.context.scale(\r\n\t\t\tPayload.Units.PHYSICS_TO_GRAPHICS,\r\n\t\t\tPayload.Units.PHYSICS_TO_GRAPHICS\r\n\t\t);\r\n\t\t\r\n\t\tthis.b2World.DrawDebugData();\r\n\t}\r\n\t\r\n\trequestAnimationFrame(function() {\r\n\t\tself.step();\r\n\t});\r\n\t\r\n\tif(window.stats)\r\n\t\twindow.stats.end();\r\n}\r\n\r\nPayload.World.prototype.enableDebugDraw = function()\r\n{\r\n\tvar e_shapeBit = 0x0001;\r\n\tvar e_jointBit = 0x0002;\r\n\tvar e_aabbBit = 0x0004;\r\n\tvar e_pairBit = 0x0008;\r\n\tvar e_centerOfMassBit = 0x0010;\r\n\tvar debugDraw = this._debugDraw = getCanvasDebugDraw();\r\n\t\r\n\tvar width\t\t\t= window.innerWidth;\r\n\tvar height\t\t\t= window.innerHeight;\r\n\t\r\n\tif(!this.canvas)\r\n\t{\r\n\t\t// Debug canvas\r\n\t\tthis.canvas\t\t\t= document.createElement(\"canvas\");\r\n\t\tthis.canvas.id\t\t= \"debug-draw\";\r\n\t\t\r\n\t\tthis.canvas.width\t= width;\r\n\t\tthis.canvas.height\t= height;\r\n\t\tthis.context \t\t= this.canvas.getContext(\"2d\");\r\n\t\t\r\n\t\tdocument.querySelector(\"#scene\").appendChild(this.canvas);\r\n\t\t\r\n\t\twindow.context = this.context;\r\n\t\r\n\t\tthis.b2World.SetDebugDraw( debugDraw );\r\n\t\tdebugDraw.SetFlags(e_pairBit | e_shapeBit | e_centerOfMassBit);\r\n\t}\r\n\t\r\n\tthis.debugDrawEnabled = true;\r\n}","/* requires: \r\ncore.js\r\nevents/event-dispatcher.js\r\n*/\r\n\r\n/**\r\n * @module Payload.Entity\r\n * Base class for entities, which can optionally be audible, visible or phsyical\r\n */\r\nPayload.Entity = function(world, options)\r\n{\r\n\tPayload.assert(world instanceof Payload.World);\r\n\t\r\n\tPayload.EventDispatcher.call(this);\r\n\t\r\n\tthis.world = world;\r\n\t\r\n\tthis.initPhysics();\r\n\tthis.initGraphics();\r\n\tthis.initAudio();\r\n\t\r\n\tthis.setOptions(options);\r\n}\r\n\r\nPayload.extend(Payload.Entity, Payload.EventDispatcher);\r\n\r\nObject.defineProperty(Payload.Entity.prototype, \"position\", {\r\n\t\r\n\t\"get\": function()\r\n\t{\r\n\t\tif(this.b2Body)\r\n\t\t{\r\n\t\t\tvar vec = this.b2Body.GetWorldCenter();\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tx: vec.get_x() * Payload.Units.PHYSICS_TO_GRAPHICS,\r\n\t\t\t\ty: vec.get_y() * Payload.Units.PHYSICS_TO_GRAPHICS\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif(this.object3d)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tx: this.object3d.position.x,\r\n\t\t\t\ty: this.object3d.position.y\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tthrow new Error(\"Entity has no body or object to get position from\");\r\n\t},\r\n\t\r\n\t\"set\": function(position)\r\n\t{\r\n\t\tPayload.assert(\"x\" in position && $.isNumeric(position.x));\r\n\t\tPayload.assert(\"y\" in position && $.isNumeric(position.y));\r\n\t\t\r\n\t\tvar x = position.x;\r\n\t\tvar y = position.y;\r\n\t\t\r\n\t\tif(this.b2Body)\r\n\t\t\tthis.b2Body.SetTransform(\r\n\t\t\t\tnew Box2D.b2Vec2(\r\n\t\t\t\t\tx * Payload.Units.GRAPHICS_TO_PHYSICS, \r\n\t\t\t\t\ty * Payload.Units.GRAPHICS_TO_PHYSICS),\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t\t\r\n\t\tif(this.object3d)\r\n\t\t\tthis.object3d.position.set(x, y, 0);\r\n\t}\r\n\t\r\n});\r\n\r\nPayload.Entity.prototype.initPhysics = function()\r\n{\r\n\t\r\n}\r\n\r\nPayload.Entity.prototype.initGraphics = function()\r\n{\r\n\t\r\n}\r\n\r\nPayload.Entity.prototype.initAudio = function()\r\n{\r\n\t\r\n}\r\n\r\nPayload.Entity.prototype.setOptions = function(options)\r\n{\r\n\tif(!options)\r\n\t\treturn;\r\n\t\r\n\tif(\"position\" in options)\r\n\t\tthis.position = options.position;\r\n}\r\n\r\nPayload.Entity.prototype.update = function()\r\n{\r\n\tif(this.b2Body && this.object3d)\r\n\t{\r\n\t\tvar position\t= this.b2Body.GetWorldCenter();\r\n\t\tvar angle\t\t= this.b2Body.GetAngle();\r\n\t\t\r\n\t\tvar x\t\t\t= position.get_x() * Payload.Units.PHYSICS_TO_GRAPHICS;\r\n\t\tvar y\t\t\t= position.get_y() * Payload.Units.PHYSICS_TO_GRAPHICS;\r\n\t\t\r\n\t\tthis.object3d.position.set(x, y, 0);\r\n\t\tthis.object3d.rotation.set(0, 0, angle);\r\n\t}\r\n}\r\n\r\nPayload.Entity.prototype.onCollision = function(entity, localFixture, otherFixture)\r\n{\r\n\t\r\n}\r\n\r\nPayload.Entity.prototype.remove = function()\r\n{\r\n\tif(this.b2Body)\r\n\t{\r\n\t\tthis.world.b2World.DestroyBody(this.b2Body);\r\n\t\tthis.b2Body = null;\r\n\t}\r\n\t\r\n\tif(this.object3d)\r\n\t{\r\n\t\tthis.world.scene.remove(this.object3d);\r\n\t\tthis.object3d = null;\r\n\t}\r\n\t\r\n\tthis.world.remove(this);\r\n\tthis.world = null;\r\n}","// requires: entities/entity.js\r\n\r\nPayload.Planet = function(world, options)\r\n{\r\n\tthis.fixtureDestructionQueue = [];\r\n\tthis.fixturesByFaceIndex = [];\r\n\t\r\n\t// NB: Do this here because initMesh is called before Entity sets it\r\n\tthis.world = world;\r\n\t\r\n\tthis.initMesh(options);\r\n\t\r\n\tPayload.Entity.apply(this, arguments);\r\n}\r\n\r\nPayload.extend(Payload.Planet, Payload.Entity);\r\n\r\nPayload.Planet.spherize = function(img)\r\n{\r\n\tvar size = 512;\r\n\tvar src = document.createElement(\"canvas\");\r\n\t\r\n\tsrc.width = size;\r\n\tsrc.height = size;\r\n\t\r\n\tvar srcctx = src.getContext(\"2d\");\r\n\tsrcctx.drawImage(img, 0, 0);\r\n\t\r\n\tvar dst\t\t= document.createElement(\"canvas\");\r\n\tdst.width = dst.height = size;\r\n\t\r\n\tvar dstctx\t= dst.getContext(\"2d\");\r\n\t\r\n\tdstctx.fillStyle = \"red\";\r\n\tdstctx.fillRect(0, 0, 512, 512);\r\n\t\r\n\tvar srcpixels = srcctx.getImageData(0, 0, size, size).data;\r\n\tvar dstpixels = srcpixels.slice();\r\n\t\r\n\tdstpixels.fill(0);\r\n\t\r\n\tfunction copyPixel(srcx, srcy, dstx, dsty)\r\n\t{\r\n\t\tvar srcpos = (4 * srcy * size) + (4 * srcx);\r\n\t\tvar dstpos = (4 * dsty * size) + (4 * dstx);\r\n\t\t\r\n\t\tdstpixels[dstpos]\t= srcpixels[srcpos];\r\n\t\tdstpixels[dstpos+1]\t= srcpixels[srcpos+1];\r\n\t\tdstpixels[dstpos+2]\t= srcpixels[srcpos+2];\r\n\t\tdstpixels[dstpos+3]\t= srcpixels[srcpos+3];\r\n\t}\r\n\t\r\n\tfor(var y = 0; y < size; y++)\r\n\t{\r\n\t\tvar ny\t= ((2 * y) / size) - 1;\r\n\t\tvar ny2\t= ny * ny;\r\n\t\t\r\n\t\tfor(var x = 0; x < size; x++)\r\n\t\t{\r\n\t\t\tvar nx\t\t= ((2 * x) / size) - 1;\r\n\t\t\tvar nx2\t\t= nx * nx;\r\n\t\t\t\r\n\t\t\tvar r\t\t= Math.sqrt(nx2 + ny2);\r\n\t\t\t\r\n\t\t\tif(r > 1)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tvar nr\t\t= Math.sqrt(1 - r * r);\r\n\t\t\tnr\t\t\t= (r + (1.0 - nr)) / 2;\r\n\t\t\t\r\n\t\t\tif(nr > 1)\r\n\t\t\t\tcontinue;\r\n\t\t\t\r\n\t\t\tvar theta\t= Math.atan2(ny, nx);\r\n\t\t\tvar nxn\t\t= nr * Math.cos(theta);\r\n\t\t\tvar nyn\t\t= nr * Math.sin(theta);\r\n\t\t\tvar x2\t\t= parseInt( ((nxn+1) * size) / 2 );\r\n\t\t\tvar y2\t\t= parseInt( ((nyn+1) * size) / 2 );\r\n\t\t\t\r\n\t\t\tcopyPixel(x2, y2, x, y);\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar temp = new ImageData(size, size);\r\n\ttemp.data.set(dstpixels);\r\n\t\r\n\tsrcctx.putImageData(temp, 0, 0);\r\n\t\r\n\treturn src;\r\n}\r\n\r\nPayload.Planet.prototype.initMesh = function(options)\r\n{\r\n\tvar minRadius = this.world.options.planet.radius.minimum;\r\n\tvar maxRadius = this.world.options.planet.radius.maximum;\r\n\t\r\n\tvar radius = this._radius = minRadius + (Math.random() * Math.round(maxRadius - minRadius));\r\n\tvar density = this._density = 0.5 + (Math.random() * 2);\r\n\t\r\n\tvar area = this._area\t\t= Math.PI * Math.pow(radius, 2);\r\n\tvar sides = this._sides\t\t= Math.round( Math.sqrt(radius) * Math.PI );\r\n\tvar cx = 0;\r\n\tvar cy = 0;\r\n\t\r\n\tvar sites = [];\r\n\t\r\n\tfor(var i = 0; i < sides; i++)\r\n\t{\r\n\t\tvar angle = (i / sides) * Math.PI * 2;\r\n\t\r\n\t\tsites.push([\r\n\t\t\tcx + Math.sin(angle) * radius,\r\n\t\t\tcy + Math.cos(angle) * radius\r\n\t\t]);\r\n\t}\r\n\t\r\n\tvar power\t= 2;\t// Higher powers will bias points towards the surface, 2 will give an even distribution\r\n\tvar inner\t= Math.round(Math.sqrt(area)) * density;\r\n\t\r\n\tfor(var i = 0; i < inner; i++)\r\n\t{\r\n\t\tvar a = Math.random() * 2 * Math.PI;\r\n\t\tvar r = radius * Math.pow(Math.random(), 1 / power);\r\n\t\t\r\n\t\tsites.push([\r\n\t\t\tcx + Math.sin(a) * r,\r\n\t\t\tcy + Math.cos(a) * r\r\n\t\t]);\r\n\t}\r\n\t\r\n\tvar delaunator\t= Delaunator.from(sites);\r\n\t\r\n\tthis._vertices\t= sites;\r\n\tthis._indices\t= delaunator.triangles;\r\n}\r\n\r\nPayload.Planet.prototype.initPhysics = function(options)\r\n{\r\n\tvar sites\t\t= this._vertices;\r\n\tvar triangles\t= this._indices;\r\n\t\r\n\tthis._destructionGravityMultiplier = 1;\r\n\tthis.b2CenterOfGravity = new Box2D.b2Vec2();\r\n\t\r\n\tthis.b2BodyDef\t= new Box2D.b2BodyDef();\r\n\t\r\n\tthis.b2Body\t\t= this.world.b2World.CreateBody(this.b2BodyDef);\r\n\t\r\n\tfunction convertPoint(point, scale)\r\n\t{\r\n\t\tif(!scale)\r\n\t\t\tscale = 1;\r\n\t\t\r\n\t\treturn new Box2D.b2Vec2(\r\n\t\t\tpoint[0] * scale,\r\n\t\t\tpoint[1] * scale\r\n\t\t);\r\n\t}\r\n\t\r\n\tfunction createPolygonShape(vertices) {\r\n\t\tvar shape = new Box2D.b2PolygonShape();\r\n\t\t// var buffer = Box2D.allocate(vertices.length * 8, 'float', Box2D.ALLOC_STACK);\r\n\t\tvar buffer = Box2D._malloc(vertices.length * 8);\r\n\t\tvar offset = 0;\r\n\t\tfor (var i = 0; i < vertices.length; i++) {\r\n\t\t\t// Box2D.setValue(buffer + (offset), vertices[i].get_x(), 'float'); // x\r\n\t\t\tBox2D.HEAPF32[buffer + offset >> 2] = vertices[i].get_x();\r\n\t\t\t// Box2D.setValue(buffer + (offset + 4), vertices[i].get_y(), 'float'); // y\r\n\t\t\tBox2D.HEAPF32[buffer + (offset + 4) >> 2] = vertices[i].get_y();\r\n\t\t\toffset += 8;\r\n\t\t}\r\n\t\tvar ptr_wrapped = Box2D.wrapPointer(buffer, Box2D.b2Vec2);\r\n\t\tshape.Set(ptr_wrapped, vertices.length);\r\n\t\treturn shape;\r\n\t}\r\n\t\r\n\tfor(var i = 0; i < triangles.length; i += 3)\r\n\t{\r\n\t\tvar vertices = [];\r\n\t\t\r\n\t\tvertices.push( convertPoint(sites[triangles[i+2]], Payload.Units.GRAPHICS_TO_PHYSICS) );\r\n\t\tvertices.push( convertPoint(sites[triangles[i+1]], Payload.Units.GRAPHICS_TO_PHYSICS) );\r\n\t\tvertices.push( convertPoint(sites[triangles[i]]  , Payload.Units.GRAPHICS_TO_PHYSICS) );\r\n\t\tvertices.push( convertPoint(sites[triangles[i+2]], Payload.Units.GRAPHICS_TO_PHYSICS) );\r\n\t\t\r\n\t\tvar shape = createPolygonShape(vertices);\r\n\t\t\r\n\t\tvar fixtureDef = new Box2D.b2FixtureDef();\r\n\t\tfixtureDef.set_density(this._density);\r\n\t\tfixtureDef.set_friction(this.world.options.planet.friction);\r\n\t\tfixtureDef.set_restitution(this.world.options.planet.restitution);\r\n\t\tfixtureDef.set_shape(shape);\r\n\t\t\r\n\t\tvar fixture = this.b2Body.CreateFixture(fixtureDef);\r\n\t\tthis.fixturesByFaceIndex[parseInt(i / 3)] = fixture;\r\n\t}\r\n}\r\n\r\nPayload.Planet.prototype.initGraphics = function()\r\n{\r\n\t// Materials first\r\n\tvar materials = {\r\n\t\t\"damage\":\tnull,\r\n\t\t\"surface\":\tnull\r\n\t};\r\n\t\r\n\tfor(var type in materials)\r\n\t{\r\n\t\tvar asset\t= payload.assets.textures.planet[type].random();\r\n\t\tvar canvas\t= Payload.Planet.spherize(asset.resource.image);\r\n\t\t\r\n\t\tmaterials[type] = new THREE.MeshBasicMaterial();\r\n\t\tmaterials[type].map = new THREE.CanvasTexture(canvas);\r\n\t}\r\n\t\r\n\t// Now build a mesh\r\n\tvar v;\r\n\t\r\n\tthis.object3d = new THREE.Object3D();\r\n\t\r\n\tthis.damage = new THREE.Mesh(\r\n\t\tnew THREE.CircleGeometry(this._radius, this._sides),\r\n\t\tmaterials.damage\r\n\t);\r\n\tthis.object3d.add(this.damage);\r\n\t\r\n\tthis.geometry = new THREE.Geometry();\r\n\t\r\n\tfor(var i = 0; i < this._vertices.length; i++)\r\n\t{\r\n\t\tv = this._vertices[i];\r\n\t\tthis.geometry.vertices.push(new THREE.Vector3(v[0], v[1], 0));\r\n\t}\r\n\t\r\n\tfor(var i = 0; i < this._indices.length; i += 3)\r\n\t{\r\n\t\tvar faceIndex\t= parseInt(i / 3);\r\n\t\tvar fixture\t\t= this.fixturesByFaceIndex[faceIndex];\r\n\t\t\r\n\t\tvar face = new THREE.Face3(\r\n\t\t\tthis._indices[i],\r\n\t\t\tthis._indices[i + 1],\r\n\t\t\tthis._indices[i + 2]\r\n\t\t);\r\n\t\t\r\n\t\tface.fixture = fixture;\r\n\t\tfixture.face = face;\r\n\t\t\r\n\t\tthis.geometry.faces.push(face);\r\n\t\t\r\n\t\tvar faceUVs = [];\r\n\t\tvar radius2\t= this._radius * 2;\r\n\t\t\r\n\t\tfor(var j = 0; j < 3; j++)\r\n\t\t{\r\n\t\t\tvar vertex = this._vertices[ this._indices[i + j] ];\r\n\t\t\tvar vector = new THREE.Vector2(\r\n\t\t\t\t0.5 + (vertex[0] / radius2),\r\n\t\t\t\t0.5 + (vertex[1] / radius2)\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\tfaceUVs.push(vector);\r\n\t\t}\r\n\t\t\r\n\t\tthis.geometry.faceVertexUvs[0].push(faceUVs);\r\n\t}\r\n\t\r\n\tthis.object3d = new THREE.Mesh(this.geometry, materials.surface);\r\n\t\r\n\tdelete this.fixturesByFaceIndex;\r\n}","// requires: entities/entity.js\r\n\r\nPayload.Ship = function()\r\n{\r\n\tPayload.Entity.apply(this, arguments);\r\n}\r\n\r\nPayload.extend(Payload.Ship, Payload.Entity);\r\n","// requires: events/event-dispatcher.js\r\n\r\n/**\r\n * @module Payload.Assets\r\n * Loads all assetse ready for use before the game starts\r\n */\r\nPayload.Assets = function()\r\n{\r\n\tvar self = this;\r\n\t\r\n\tPayload.EventDispatcher.call(this);\r\n\t\r\n\tthis.collections = [];\r\n\t\r\n\tthis.manager = new THREE.LoadingManager();\r\n\tthis.manager.onStart = function(url, loaded, total) {\r\n\t\tself.onProgress(url, loaded, total);\r\n\t};\r\n\tthis.manager.onProgress = function(url, loaded, total) {\r\n\t\tself.onProgress(url, loaded, total);\r\n\t};\r\n\tthis.manager.onLoad = function() {\r\n\t\tself.onLoad();\r\n\t};\r\n\tthis.manager.onError = function(url) {\r\n\t\tself.onError(url);\r\n\t}\r\n}\r\n\r\nPayload.extend(Payload.Assets, Payload.EventDispatcher);\r\n\r\nPayload.Assets.prototype.load = function()\r\n{\r\n\tvar self = this;\r\n\t\r\n\t$.ajax(\"assets.json\", {\r\n\t\t\r\n\t\tsuccess: function(response, status, xhr) {\r\n\t\t\tself.loadFromJSON(response);\r\n\t\t},\r\n\t\t\r\n\t\terror: function(xhr, status, error) {\r\n\t\t\tthrow new Error(\"Error loading assets file\");\r\n\t\t}\r\n\t\t\r\n\t});\r\n}\r\n\r\nPayload.Assets.prototype.loadFromJSON = function(json)\r\n{\r\n\tPayload.assert(typeof json == \"object\", \"Invalid assets file\");\r\n\t\r\n\t// NB: Get around a quirk of the directory map gulp plugin\r\n\tjson = json[\"\"];\r\n\t\r\n\tfor(var name in json)\r\n\t{\r\n\t\tthis[name] = new Payload.Assets.Collection(json[name]);\r\n\t}\r\n}\r\n\r\nPayload.Assets.prototype.onProgress = function(url, loaded, total)\r\n{\r\n\tthis.trigger({\r\n\t\ttype:\t\t\"progress\",\r\n\t\tamount:\t\tloaded / total,\r\n\t\tpercent:\t(loaded / total) * 100\r\n\t});\r\n}\r\n\r\nPayload.Assets.prototype.onError = function(url, loaded, total)\r\n{\r\n\tthrow new Error(\"Failed to load asset\");\r\n}\r\n\r\nPayload.Assets.prototype.onLoad = function()\r\n{\r\n\tthis.trigger(\"load\");\r\n}","// requires: assets/assets.js\r\n\r\nPayload.Assets.Asset = function(src)\r\n{\r\n\tvar self\t\t= this;\r\n\tvar constructor\t= this.getLoaderFromFilename(src);\r\n\t\r\n\tthis.loader\t\t= new constructor(payload.assets.manager);\r\n\t\t\r\n\tthis.loader.load(\"/assets\" + src, function(resource) {\r\n\t\tself.resource = resource;\r\n\t});\r\n}\r\n\r\nPayload.Assets.Asset.prototype.getLoaderFromFilename = function(filename)\r\n{\r\n\tvar m = /\\.[a-z0-9]+$/i.exec(filename);\r\n\t\r\n\tif(!m || !m[0])\r\n\t\tthrow new Error(\"Don't know how to load asset\");\r\n\t\r\n\tswitch(m[0].toLowerCase())\r\n\t{\r\n\t\tcase \".png\":\r\n\t\tcase \".jpg\":\r\n\t\tcase \".jpeg\":\r\n\t\t\r\n\t\t\treturn THREE.TextureLoader;\r\n\t\t\r\n\t\t\tbreak;\r\n\t}\r\n}","// requires: assets/assets.js\r\n\r\n/**\r\n * @module Payload.Collection\r\n * Loads all assetse ready for use before the game starts\r\n */\r\n\r\nPayload.Assets.Collection = function(json)\r\n{\r\n\tthis.assets = {};\r\n\t\r\n\tfunction isAssetDefinition(obj)\r\n\t{\r\n\t\tvar index = 0;\r\n\t\t\r\n\t\tif(typeof obj == \"string\")\r\n\t\t\treturn true;\r\n\t\t\r\n\t\tfor(var name in obj)\r\n\t\t{\r\n\t\t\tif(typeof obj[name] != \"string\")\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(++index > 1)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor(var name in json)\r\n\t{\r\n\t\tvar child = json[name];\r\n\t\t\r\n\t\tif(isAssetDefinition(child))\r\n\t\t\tthis.assets[name] = new Payload.Assets.Asset(child);\r\n\t\telse\r\n\t\t\tthis[name] = new Payload.Assets.Collection(child);\r\n\t}\r\n}\r\n\r\nPayload.Assets.Collection.prototype.random = function()\r\n{\r\n\tvar arr\t\t= Object.values(this.assets);\r\n\tvar index\t= Math.floor( Math.random() * arr.length );\r\n\t\r\n\treturn arr[index];\r\n}","// requires: core.js\r\n\t\t\r\n/**\r\n * Base class used for events (for non-HTMLElement objects)\r\n * @module Payload.Event\r\n * @memberof Payload\r\n * @param {string|object} options The event type as a string, or an object of options to be mapped to this event\r\n */\r\nPayload.Event = function(options)\r\n{\r\n\tif(typeof options == \"string\")\r\n\t\tthis.type = options;\r\n\t\r\n\tthis.bubbles\t\t= true;\r\n\tthis.cancelable\t\t= true;\r\n\tthis.phase\t\t\t= Payload.Event.PHASE_CAPTURE;\r\n\tthis.target\t\t\t= null;\r\n\t\r\n\tthis._cancelled = false;\r\n\t\r\n\tif(typeof options == \"object\")\r\n\t\tfor(var name in options)\r\n\t\t\tthis[name] = options[name];\r\n}\r\n\r\nPayload.Event.CAPTURING_PHASE\t\t= 0;\r\nPayload.Event.AT_TARGET\t\t\t\t= 1;\r\nPayload.Event.BUBBLING_PHASE\t\t= 2;\r\n\r\n/**\r\n * Prevents any further propagation of this event\r\n * @method\r\n * @memberof Payload.Event\r\n */\r\nPayload.Event.prototype.stopPropagation = function()\r\n{\r\n\tthis._cancelled = true;\r\n}\r\n"]}